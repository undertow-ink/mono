name: Test changed packages

on:
  push:
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Find changed package roots
        id: pkgs
        shell: bash
        run: |
          set -euo pipefail

          git fetch origin +refs/heads/*:refs/remotes/origin/*

          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE="${{ github.event.pull_request.base.sha }}"
          else
            BASE="${{ github.event.before }}"
            if [ -z "$BASE" ] || [ "$BASE" = "0000000000000000000000000000000000000000" ]; then
              DEFAULT_BRANCH="${{ github.event.repository.default_branch }}"
              BASE="$(git merge-base HEAD "origin/${DEFAULT_BRANCH}")"
            fi
          fi

          echo "Diff base: $BASE"

          # Read changed files (NUL-separated) into an array
          mapfile -d '' -t files < <(git diff --name-only -z "$BASE"...HEAD)

          declare -A roots=()

          for file in "${files[@]}"; do
            # root-level package.json special case
            if [[ "$file" == "package.json" && -f package.json ]]; then
              roots["."]=1
              continue
            fi

            # start from the file's directory; if no slash in path, skip
            dir="${file%/*}"
            [[ "$dir" == "$file" ]] && continue

            # climb to nearest ancestor with package.json, stopping if parent no longer shortens
            while [[ -n "$dir" && "$dir" != "." && "$dir" != "/" ]]; do
              if [[ -f "$dir/package.json" ]]; then
                roots["$dir"]=1
                break
              fi
              parent="${dir%/*}"
              if [[ "$parent" == "$dir" ]]; then
                dir="."
              else
                dir="$parent"
              fi
            done
          done

          if (( ${#roots[@]} == 0 )); then
            echo "dirs=" >> "$GITHUB_OUTPUT"
            echo "No changed package roots detected."
            exit 0
          fi

          # emit space-separated list
          dirs=""
          for d in "${!roots[@]}"; do dirs+="$d "; done
          dirs="${dirs%% }"

          echo "dirs=$dirs" >> "$GITHUB_OUTPUT"
          echo "Packages to test:"
          printf '%s\n' $dirs

      - name: Run tests in all discovered packages
        if: steps.pkgs.outputs.dirs != ''
        shell: bash
        run: |
          set -euo pipefail
          failed=0
          for d in ${{ steps.pkgs.outputs.dirs }}; do
            echo "::group::Testing $d"
            # keep going even if one package fails
            ( cd "$d" && (npm ci --prefer-offline --no-audit --fund=false || npm install) && npm test ) || failed=1
            echo "::endgroup::"
          done
          exit $failed
