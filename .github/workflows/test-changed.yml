name: Test changed packages

on:
  push:
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Find changed package roots (full window)
        id: pkgs
        shell: bash
        run: |
          set -euo pipefail

          git fetch origin +refs/heads/*:refs/remotes/origin/*

          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE="${{ github.event.pull_request.base.sha }}"
          else
            BASE="${{ github.event.before }}"
            # first push on a new branch may have a null "before"
            if [ -z "$BASE" ] || [ "$BASE" = "0000000000000000000000000000000000000000" ]; then
              DEFAULT_BRANCH="${{ github.event.repository.default_branch }}"
              BASE="$(git merge-base HEAD "origin/${DEFAULT_BRANCH}")"
            fi
          fi

          echo "Diff base: $BASE"

          changed_pkg_dirs=$(
            git diff --name-only -z "$BASE"...HEAD |
            while IFS= read -r -d '' file; do
              # special case: root-level package.json changed
              if [ "$file" = "package.json" ] && [ -f package.json ]; then
                printf '%s\0' "."
                continue
              fi

              dir="${file%/*}"
              # climb up until we find the nearest package.json
              while [ -n "$dir" ] && [ "$dir" != "." ] && [ "$dir" != "/" ]; do
                if [ -f "$dir/package.json" ]; then
                  printf '%s\0' "$dir"
                  break
                fi
                dir="${dir%/*}"
              done
            done | sort -zu | tr '\0' '\n'
          )

          if [ -z "$changed_pkg_dirs" ]; then
            echo "dirs=" >> "$GITHUB_OUTPUT"
            echo "No changed package roots detected."
            exit 0
          fi

          printf 'dirs=%s\n' "$(printf '%s ' $changed_pkg_dirs)" >> "$GITHUB_OUTPUT"
          echo "Packages to test:"
          echo "$changed_pkg_dirs"

      - name: Run tests in all discovered packages
        if: steps.pkgs.outputs.dirs != ''
        shell: bash
        run: |
          set -euo pipefail
          failed=0
          for d in ${{ steps.pkgs.outputs.dirs }}; do
            echo "::group::Testing $d"
            # keep going even if one package fails
            ( cd "$d" && (npm ci --prefer-offline --no-audit --fund=false || npm install) && npm test ) || failed=1
            echo "::endgroup::"
          done
          exit $failed
